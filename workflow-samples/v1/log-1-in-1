localhost:~# docker run -it \
>     -e "DOCKER_API_VERSION=v1.35" \
>     -e "WORKER_ID=fde7c87c-d154-447e-9fce-7eb7bdec90c0" \
>     -e "DOCKER_REGISTRY=192.168.1.1" \
>     -e "ROVER_GRPC_AUTHORITY=192.168.1.1:42113" \
>     -e "ROVER_CERT_URL=http://192.168.1.1:42114/cert" \
>     -e "REGISTRY_USERNAME=packetadmin" \
>     -e "REGISTRY_PASSWORD=P@ck3tR0cks!" \
>     -v /var/run/docker.sock:/var/run/docker.sock \
>     -v /worker:/worker \
> -v /etc/docker/cert.d/192.168.1.1:/192.168.1.1 \
> 192.168.1.1/worker
^[[6;3RINFO[0000] RETRY_INTERVAL not set. Using default, 3 seconds 
INFO[0000] MAX_RETRY not set. Using default, 3 retries. 
INFO[0000] Fetching latest context for worker fde7c87c-d154-447e-9fce-7eb7bdec90c0  worker_id=fde7c87c-d154-447e-9fce-7eb7bdec90c0
ERRO[0000] Variable WORKER_LOG_LEVEL is not set. Default is Info 
{"level":"info","msg":"Starting with action task_name:\"os-installation\" name:\"disk-wipe\" image:\"disk-wipe\" timeout:90 worker_id:\"fde7c87c-d154-447e-9fce-7eb7bdec90c0\" volumes:\"/worker:/worker\" volumes:\"/mnt:/mnt\" volumes:\"/dev:/dev\" volumes:\"/dev/console:/dev/console\" volumes:\"/lib/firmware:/lib/firmware:ro\" \n","time":"2020-02-11T04:53:30Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0"}
{"action_name":"disk-wipe","level":"info","msg":"Sent action status  ACTION_IN_PROGRESS","time":"2020-02-11T04:53:30Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0"}
{"status":"Pulling from disk-wipe","id":"latest"}
{"status":"Digest: sha256:47bcbe64a2b6681296add6d9963c7c26e8404e76c412aeb6ac93a456c2ef46cc"}
{"status":"Status: Image is up to date for 192.168.1.1/disk-wipe:latest"}
{"level":"info","msg":"Starting the container with cmd []","time":"2020-02-11T04:53:30Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
+ set -o nounset
@+ disks=($(lsblk -dno name -e1,7,11 | sed 's|^|/dev/|' | sort))
++ lsblk -dno name -e1,7,11
++ sed 's|^|/dev/|'
++ sort

 ++ date +%s
+ stimer=1581396810
7+ mdarrays=($(awk '/md/ {print $4}' /proc/partitions))
*++ awk '/md/ {print $4}' /proc/partitions
+ (( 0 != 0 ))
+ for bd in '"${disks[@]}"'
+ for bd in '"${disks[@]}"'
+ sgdisk -Z /dev/sda
+ for bd in '"${disks[@]}"'
+ sgdisk -Z /dev/sdb
+ for bd in '"${disks[@]}"'
+ sgdisk -Z /dev/sdc
+ for bd in '"${disks[@]}"'

+ wait -n
+ sgdisk -Z /dev/sdd
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ [[ -d /sys/firmware/efi ]]
++ efibootmgr
;++ sed -n '/^Boot[0-9A-F]/ s|Boot\([0-9A-F]\{4\}\).*|\1|p'
<efibootmgr: EFI variables are not supported on this system.
+ echo 'Disk wipe finished.'
Disk wipe finished.

 ++ date +%s
+ etimer=1581396811
/+ echo -e '\033[0;33;5;7mClean time: 1\033[0m'
Clean time: 1
{"level":"info","msg":"Container with id  a4da7816343eb1006573dcdd06bd53648999c5a63bd7c1bcc84f5862b4817308 finished with status code :  0","time":"2020-02-11T04:53:31Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ [[ -d /sys/firmware/efi ]]
++ efibootmgr
;++ sed -n '/^Boot[0-9A-F]/ s|Boot\([0-9A-F]\{4\}\).*|\1|p'
<efibootmgr: EFI variables are not supported on this system.
+ echo 'Disk wipe finished.'
Disk wipe finished.

 ++ date +%s
+ etimer=1581396811
/+ echo -e '\033[0;33;5;7mClean time: 1\033[0m'
Clean time: 1
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ for bd in '"${disks[@]}"'

+ wait -n
Creating new GPT entries.
MGPT data structures destroyed! You may now partition the disk using fdisk or
other utilities.
+ [[ -d /sys/firmware/efi ]]
++ efibootmgr
;++ sed -n '/^Boot[0-9A-F]/ s|Boot\([0-9A-F]\{4\}\).*|\1|p'
<efibootmgr: EFI variables are not supported on this system.
+ echo 'Disk wipe finished.'
Disk wipe finished.

 ++ date +%s
+ etimer=1581396811
/+ echo -e '\033[0;33;5;7mClean time: 1\033[0m'
Clean time: 1
{"level":"info","msg":"Container removed with Status  ACTION_SUCCESS","time":"2020-02-11T04:53:31Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Action container exits with status code  ACTION_SUCCESS","time":"2020-02-11T04:53:31Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Sent action status workflow_id:\"cdc7d140-6f3e-4285-8303-668f670ce145\" task_name:\"os-installation\" action_name:\"disk-wipe\" action_status:ACTION_SUCCESS seconds:1 message:\"Finished Execution Successfully\" worker_id:\"fde7c87c-d154-447e-9fce-7eb7bdec90c0\" \n","time":"2020-02-11T04:53:31Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"action_name":"disk-partition","level":"info","msg":"Sent action status  ACTION_IN_PROGRESS","time":"2020-02-11T04:53:31Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"status":"Pulling from disk-partition","id":"latest"}
{"status":"Digest: sha256:cf38c6c5b3c939e43eabf0408aabff170dec307d05b2626e9683e12869834d6c"}
{"status":"Status: Image is up to date for 192.168.1.1/disk-partition:latest"}
{"level":"info","msg":"Starting the container with cmd []","time":"2020-02-11T04:53:32Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
+ set -o nounset
+ metadata=/metadata
F+ curl -sSL --connect-timeout 60 https://metadata.packet.net/metadata
@+ disks=($(lsblk -dno name -e1,7,11 | sed 's|^|/dev/|' | sort))
++ lsblk -dno name -e1,7,11
++ sed 's|^|/dev/|'
++ sort
+ userdata=/dev/null

 ++ uname -m
+ arch=x86_64
2+ check_required_arg /metadata 'metadata file' -M
+ arg=/metadata
+ name='metadata file'

 + switch=-M
+ [[ -n /metadata ]]

 + return 0
+ declare class
 + set_from_metadata class class
+ local var=class key=class

 + local val
+++ jq -r 'select(.class != null) | .class'
+ val=c2.medium.x86
+ [[ -z c2.medium.x86 ]]
!+ declare -g class=c2.medium.x86
+ declare facility
&+ set_from_metadata facility facility
"+ local var=facility key=facility

 + local val
1++ jq -r 'select(.facility != null) | .facility'

 + val=ewr1
+ [[ -z ewr1 ]]
+ declare -g facility=ewr1
+ declare os
-+ set_from_metadata os operating_system.slug
)+ local var=os key=operating_system.slug

 + local val
K++ jq -r 'select(.operating_system.slug != null) | .operating_system.slug'
+ val=ubuntu_18_04
+ [[ -z ubuntu_18_04 ]]
+ declare -g os=ubuntu_18_04
+ declare preserve_data
6+ set_from_metadata preserve_data preserve_data false
,+ local var=preserve_data key=preserve_data

 + local val
;++ jq -r 'select(.preserve_data != null) | .preserve_data'
+ val=
+ [[ -z '' ]]
1+ echo 'preserve_data is missing, empty or null'
(preserve_data is missing, empty or null
+ [[ -z false ]]
0+ echo 'using default value  for preserve_data'
'using default value  for preserve_data

 + val=false
!+ declare -g preserve_data=false
2+ declare pwhash=5f4dcc3b5aa765d61d8327deb882cf99
+ declare state=provisioning
+ declare tag
3+ set_from_metadata tag operating_system.image_tag
/+ local var=tag key=operating_system.image_tag

 + local val
U++ jq -r 'select(.operating_system.image_tag != null) | .operating_system.image_tag'
/+ val=f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
4+ [[ -z f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6 ]]
:+ declare -g tag=f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
+ declare tinkerbell
.+ set_from_metadata tinkerbell phone_home_url
*+ local var=tinkerbell key=phone_home_url

 + local val
=++ jq -r 'select(.phone_home_url != null) | .phone_home_url'
3+ val=http://tinkerbell.ewr1.packet.net/phone-home
8+ [[ -z http://tinkerbell.ewr1.packet.net/phone-home ]]
E+ declare -g tinkerbell=http://tinkerbell.ewr1.packet.net/phone-home
+ declare deprovision_fast
<+ set_from_metadata deprovision_fast deprovision_fast false
2+ local var=deprovision_fast key=deprovision_fast

 + local val
A++ jq -r 'select(.deprovision_fast != null) | .deprovision_fast'
+ val=
+ [[ -z '' ]]
4+ echo 'deprovision_fast is missing, empty or null'
+deprovision_fast is missing, empty or null
+ [[ -z false ]]
3+ echo 'using default value  for deprovision_fast'
*using default value  for deprovision_fast

 + val=false
$+ declare -g deprovision_fast=false
;+ OS=ubuntu_18_04:f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
#+ echo 'Number of drives found: 4'
+ (( 4 != 0 ))
)+ echo 'Disk candidate check successful'
+ custom_image=false
+ target=/mnt/target
+ cprconfig=/tmp/config.cpr
+ cprout=/statedir/cpr.json
+ touch /statedir/cpr.json
J+ echo -e '\033[0;32m#### Checking userdata for custom cpr_url...\033[0m'
2++ sed -nr 's|.*\bcpr_url=(\S+).*|\1|p' /dev/null
Number of drives found: 4
 Disk candidate check successful
8#### Checking userdata for custom cpr_url...

 + cpr_url=
.Using default image since no cpr_url provided
+ [[ -z '' ]]
7+ echo 'Using default image since no cpr_url provided'
+ jq -c .storage /metadata
5+ [[ -f /statedir/disks-partioned-image-extracted ]]
+ OS=ubuntu_18_04
+ jq . /tmp/config.cpr
{
  "disks": [
    {
      "device": "/dev/sdd",
      "wipeTable": true,
      "partitions": [

        {
          "label": "BIOS",
          "number": 1,
          "size": "512M"

         },

        {
          "label": "SWAP",
          "number": 2,
          "size": "3993600"

         },

        {
          "label": "ROOT",
          "number": 3,
          "size": 0

        }
      ]
    }
  ],
  "filesystems": [
    {
      "mount": {
        "device": "/dev/sdd1",
        "format": "vfat",
        "point": "/boot/efi",
        "create": {
          "options": [
            "32",
            "-n",
            "EFI"

           ]

        }
      }
    },
    {
      "mount": {
        "device": "/dev/sdd3",
        "format": "ext4",
        "point": "/",
        "create": {
          "options": [
            "-L",
            "ROOT"

           ]

        }
      }
    },
    {
      "mount": {
        "device": "/dev/sdd2",
        "format": "swap",
        "point": "none",
        "create": {
          "options": [
            "-L",
            "SWAP"

           ]

        }
      }
    }
  ]
}
@+ assert_block_or_loop_devs /dev/sda /dev/sdb /dev/sdc /dev/sdd
+ local baddevs
;++ lsblk -dnro MAJ:MIN /dev/sda /dev/sdb /dev/sdc /dev/sdd
++ filter_bad_devs
:++ grep -vE '^(7|8|6[5-9]|7[01]|12[89]|13[0-5]|25[139]):'

 + baddevs=
<+ assert_same_type_devs /dev/sda /dev/sdb /dev/sdc /dev/sdd
J+ majors=($(lsblk -dnro 'MAJ:MIN' "$@" | awk -F: '{print $1}' | sort -u))
;++ lsblk -dnro MAJ:MIN /dev/sda /dev/sdb /dev/sdc /dev/sdd
++ awk -F: '{print $1}'

 ++ sort -u
+ local majors
+ [[ 8 =~ 7 ]]

+ is_uefi
+ [[ -d /sys/firmware/efi ]]

 + uefi=true
+ [[ false == false ]]
+ [[ false == false ]]
G+ echo -e '\033[0;32mChecking disks for existing partitions...\033[0m'
5Checking disks for existing partitions...
/+ fdisk -l /dev/sda /dev/sdb /dev/sdc /dev/sdd
+ grep Disklabel
,Disk candidates are ready for partitioning.
(#### Running CPR disk config
5+ echo 'Disk candidates are ready for partitioning.'
:+ echo -e '\033[0;32m#### Running CPR disk config\033[0m'

 + UEFI=true
3+ ./cpr.sh /tmp/config.cpr /mnt/target false false
+ tee /statedir/cpr.json
+ set -o nounset
+ fstab=/tmp/fstab.tmpl
+ config=/tmp/config.cpr
+ target=/mnt/target
+ preserve_data=false
+ deprovision_fast=false
J+ check_required_arg /tmp/config.cpr 'cpr config' 'config as first param'
+ arg=/tmp/config.cpr
+ name='cpr config'
!+ switch='config as first param'
+ [[ -n /tmp/config.cpr ]]

 + return 0
M+ check_required_arg /mnt/target 'target directory' 'target as second param'
+ arg=/mnt/target
+ name='target directory'
"+ switch='target as second param'
+ [[ -n /mnt/target ]]

 + return 0
]+ check_required_arg false 'should data volumes be preserved' 'preserve_data as third param'

 + arg=false
*+ name='should data volumes be preserved'
(+ switch='preserve_data as third param'
+ [[ -n false ]]

 + return 0
^+ check_required_arg false 'should disk wiping be skipped' 'deprovision_fast as fourth param'

 + arg=false
'+ name='should disk wiping be skipped'
,+ switch='deprovision_fast as fourth param'
+ [[ -n false ]]

 + return 0
+ case $# in
+ setup_disks
'+ disks=($(stormeta 'disks[].device'))
++ stormeta 'disks[].device'
+++ jq -r '.disks[].device' /tmp/config.cpr
++ msg '########## setting raids #########'
9+ echo -e '########## setting raids #########' '\033[0m'
(########## setting raids ######### 
+ raids=('hack')
4+ fsdevs=($(stormeta 'filesystems[].mount.device'))
)++ stormeta 'filesystems[].mount.device'
7++ jq -r '.filesystems[].mount.device' /tmp/config.cpr
+ stormeta 'raid[0].devices[]'
A+ msg 'No raid defined in config json - skipping raid config...'
O+ echo -e 'No raid defined in config json - skipping raid config...' '\033[0m'
>No raid defined in config json - skipping raid config... 
+ msg 'Disks: /dev/sdd'
&+ echo -e 'Disks: /dev/sdd' '\033[0m'
Disks: /dev/sdd 

 + diskcnt=0
+ for disk in '"${disks[@]}"'
)+ msg 'Writing disk config for /dev/sdd'
7+ echo -e 'Writing disk config for /dev/sdd' '\033[0m'
&Writing disk config for /dev/sdd 
+ [[ false == true ]]
+ [[ false == true ]]
<+ parts=($(stormeta "disks[$diskcnt].partitions[].number"))
+++ stormeta 'disks[0].partitions[].number'
9++ jq -r '.disks[0].partitions[].number' /tmp/config.cpr

 ++ seq 0 2
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[0].label'
9++ jq -r '.disks[0].partitions[0].label' /tmp/config.cpr
+ partlabel=BIOS
,++ stormeta 'disks[0].partitions[0].number'
:++ jq -r '.disks[0].partitions[0].number' /tmp/config.cpr

 + partnum=1
*++ stormeta 'disks[0].partitions[0].size'
8++ jq -r '.disks[0].partitions[0].size' /tmp/config.cpr
+ partsize=512M
+ parttype=8300
A+ msg 'Working on /dev/sdd part 1 aka label BIOS with size 512M'
O+ echo -e 'Working on /dev/sdd part 1 aka label BIOS with size 512M' '\033[0m'
>Working on /dev/sdd part 1 aka label BIOS with size 512M 
+ [[ BIOS =~ BIOS ]]
+ bootdevs+=("$disk")
+ case ${UEFI:-} in
+ humantype='EFI system'
+ parttype=ef00
B+ msg 'label contains BIOS, setting partition type as EFI system'
P+ echo -e 'label contains BIOS, setting partition type as EFI system' '\033[0m'
?label contains BIOS, setting partition type as EFI system 
+ [[ 512M =~ pct ]]
+ (( partsize == 0 ))
O./cpr.sh: line 105: ((: 512M: value too great for base (error token is "512M")
+ partsize=+512M
3+ sgdisk -n 1:0:+512M -c 1:BIOS -t 1:ef00 /dev/sdd
Creating new GPT entries.
Setting name!
partNum is 0
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[1].label'
9++ jq -r '.disks[0].partitions[1].label' /tmp/config.cpr
+ partlabel=SWAP
,++ stormeta 'disks[0].partitions[1].number'
:++ jq -r '.disks[0].partitions[1].number' /tmp/config.cpr

 + partnum=2
*++ stormeta 'disks[0].partitions[1].size'
8++ jq -r '.disks[0].partitions[1].size' /tmp/config.cpr
+ partsize=3993600
+ parttype=8300
D+ msg 'Working on /dev/sdd part 2 aka label SWAP with size 3993600'
R+ echo -e 'Working on /dev/sdd part 2 aka label SWAP with size 3993600' '\033[0m'
AWorking on /dev/sdd part 2 aka label SWAP with size 3993600 
+ [[ SWAP =~ BIOS ]]
+ [[ 3993600 =~ pct ]]
+ (( partsize == 0 ))
+ partsize=+3993600
6+ sgdisk -n 2:0:+3993600 -c 2:SWAP -t 2:8300 /dev/sdd
Setting name!
partNum is 1
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[2].label'
9++ jq -r '.disks[0].partitions[2].label' /tmp/config.cpr
+ partlabel=ROOT
,++ stormeta 'disks[0].partitions[2].number'
:++ jq -r '.disks[0].partitions[2].number' /tmp/config.cpr

 + partnum=3
*++ stormeta 'disks[0].partitions[2].size'
8++ jq -r '.disks[0].partitions[2].size' /tmp/config.cpr
+ partsize=0
+ parttype=8300
>+ msg 'Working on /dev/sdd part 3 aka label ROOT with size 0'
L+ echo -e 'Working on /dev/sdd part 3 aka label ROOT with size 0' '\033[0m'
;Working on /dev/sdd part 3 aka label ROOT with size 0 
+ [[ ROOT =~ BIOS ]]
+ [[ 0 =~ pct ]]
+ (( partsize == 0 ))
?+ msg 'Partsize is zero. This means use the rest of the disk.'
M+ echo -e 'Partsize is zero. This means use the rest of the disk.' '\033[0m'
<Partsize is zero. This means use the rest of the disk. 
/+ sgdisk -n 3:0:0 -c 3:ROOT -t 3:8300 /dev/sdd
Setting name!
partNum is 2
REALLY setting name!
*The operation has completed successfully.

 + diskcnt=1

 + raidcnt=0
+ for raid in '"${raids[@]}"'
+ [[ hack == \h\a\c\k ]]
+ break

+ fscnt=0
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd1'
7+ echo -e 'Writing filesystem for /dev/sdd1' '\033[0m'
&Writing filesystem for /dev/sdd1 
*++ stormeta 'filesystems[0].mount.format'
8++ jq -r '.filesystems[0].mount.format' /tmp/config.cpr
+ format=vfat
)++ stormeta 'filesystems[0].mount.point'
7++ jq -r '.filesystems[0].mount.point' /tmp/config.cpr
+ mpoint=/boot/efi
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[0].mount.create.options[]'
B++ jq -r '.filesystems[0].mount.create.options[]' /tmp/config.cpr

+ fscnt=1
E+ msg '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"'
S+ echo -e '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"' '\033[0m'
B/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi" 
+ [[ vfat == \b\i\o\s ]]
+ [[ vfat == \s\w\a\p ]]
#+ mkfs.vfat -F 32 -n EFI /dev/sdd1
mkfs.fat 3.0.28 (2015-05-16)
$++ blkid -s UUID -o value /dev/sdd1
+ thisdevuuid=34F7-D8B7
+ [[ /boot/efi == / ]]
(+ add_to_fstab 34F7-D8B7 /boot/efi vfat
[+ local UUID=34F7-D8B7 MOUNTPOINT=/boot/efi FSFORMAT=vfat options=errors=remount-ro fsck=2
%+ grep -qs 34F7-D8B7 /tmp/fstab.tmpl
+ [[ vfat == swap ]]
+ [[ /boot/efi == \/ ]]
E+ echo -e 'UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2'
+ tee -a /tmp/fstab.tmpl
4UUID=34F7-D8B7	/boot/efi	vfat	errors=remount-ro	0	2
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd3'
7+ echo -e 'Writing filesystem for /dev/sdd3' '\033[0m'
&Writing filesystem for /dev/sdd3 
*++ stormeta 'filesystems[1].mount.format'
8++ jq -r '.filesystems[1].mount.format' /tmp/config.cpr
+ format=ext4
)++ stormeta 'filesystems[1].mount.point'
7++ jq -r '.filesystems[1].mount.point' /tmp/config.cpr

 + mpoint=/
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[1].mount.create.options[]'
B++ jq -r '.filesystems[1].mount.create.options[]' /tmp/config.cpr

+ fscnt=2
;+ msg '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"'
I+ echo -e '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"' '\033[0m'
8/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/" 
+ [[ ext4 == \b\i\o\s ]]
+ [[ ext4 == \s\w\a\p ]]
!+ mkfs.ext4 -F -L ROOT /dev/sdd3
mke2fs 1.42.13 (17-May-2015)
9Discarding device blocks: done                            
?Creating filesystem with 28674673 4k blocks and 7176192 inodes
6Filesystem UUID: ae3f7757-9686-420a-ae18-3b3e4c14ad3c
&Superblock backups stored on blocks: 
J	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
0	4096000, 7962624, 11239424, 20480000, 23887872

VAllocating group tables: done                            
SWriting inode tables: done                            
&Creating journal (32768 blocks): done
\Writing superblocks and filesystem accounting information: done   

$++ blkid -s UUID -o value /dev/sdd3
3+ thisdevuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
+ [[ / == / ]]
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
;+ add_to_fstab ae3f7757-9686-420a-ae18-3b3e4c14ad3c / ext4
n+ local UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c MOUNTPOINT=/ FSFORMAT=ext4 options=errors=remount-ro fsck=2
@+ grep -qs ae3f7757-9686-420a-ae18-3b3e4c14ad3c /tmp/fstab.tmpl
+ [[ ext4 == swap ]]
+ [[ / == \/ ]]
	+ fsck=1
X+ echo -e 'UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1'
+ tee -a /tmp/fstab.tmpl
GUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c	/	ext4	errors=remount-ro	0	1
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd2'
7+ echo -e 'Writing filesystem for /dev/sdd2' '\033[0m'
&Writing filesystem for /dev/sdd2 
*++ stormeta 'filesystems[2].mount.format'
8++ jq -r '.filesystems[2].mount.format' /tmp/config.cpr
+ format=swap
)++ stormeta 'filesystems[2].mount.point'
7++ jq -r '.filesystems[2].mount.point' /tmp/config.cpr
+ mpoint=none
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[2].mount.create.options[]'
B++ jq -r '.filesystems[2].mount.create.options[]' /tmp/config.cpr

+ fscnt=3
>+ msg '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"'
L+ echo -e '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"' '\033[0m'
;/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none" 
+ [[ swap == \b\i\o\s ]]
+ [[ swap == \s\w\a\p ]]
+ mkswap /dev/sdd2
7mkswap: /dev/sdd2: warning: wiping old swap signature.
BSetting up swapspace version 1, size = 1.9 GiB (2044719104 bytes)
4no label, UUID=a836da53-4525-40af-86ae-a261d722eff4
$++ blkid -s UUID -o value /dev/sdd2
3+ thisdevuuid=a836da53-4525-40af-86ae-a261d722eff4
+ [[ none == / ]]
>+ add_to_fstab a836da53-4525-40af-86ae-a261d722eff4 none swap
q+ local UUID=a836da53-4525-40af-86ae-a261d722eff4 MOUNTPOINT=none FSFORMAT=swap options=errors=remount-ro fsck=2
@+ grep -qs a836da53-4525-40af-86ae-a261d722eff4 /tmp/fstab.tmpl
+ [[ swap == swap ]]
	+ fsck=0
+ options=none
+ [[ none == \/ ]]
N+ echo -e 'UUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0'
+ tee -a /tmp/fstab.tmpl
=UUID=a836da53-4525-40af-86ae-a261d722eff4	none	swap	none	0	0
+ cat

+ python3
&{"bootdevs": ["/dev/sdd"], "rootuuid": "ae3f7757-9686-420a-ae18-3b3e4c14ad3c", "fstab": "UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2\nUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1\nUUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0\n"}
D+ msg '\033[0;32m#### Mounting filesystems in fstab to /mnt/target'
R+ echo -e '\033[0;32m#### Mounting filesystems in fstab to /mnt/target' '\033[0m'
>#### Mounting filesystems in fstab to /mnt/target 
9+ sed -i 's|\(\S\)\t/|\1\t/mnt/target/|' /tmp/fstab.tmpl
+ read -r mnt
.++ awk '/\/mnt\// {print $2}' /tmp/fstab.tmpl
++ sort
+ mkdir -p /mnt/target/
-+ mount --fstab /tmp/fstab.tmpl /mnt/target/
+ read -r mnt
 + mkdir -p /mnt/target/boot/efi
5+ mount --fstab /tmp/fstab.tmpl /mnt/target/boot/efi
+ read -r mnt
+ mount
+ grep /mnt/target
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
P/dev/sdd3 on /mnt/target type ext4 (rw,relatime,errors=remount-ro,data=ordered)
�/dev/sdd1 on /mnt/target/boot/efi type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=utf8,shortname=mixed,errors=remount-ro)
+ mkdir -p /mnt/target/etc
+ touch /mnt/target/etc/fstab
"+ jq -r .fstab /statedir/cpr.json
<+ echo -e '\033[0;32m#### CPR disk config complete \033[0m'
*#### CPR disk config complete 
{"level":"info","msg":"Container with id  49f0c8f45bada3a254fb709977b99ab9137f7d84ec6a489bb3f150db0685cb93 finished with status code :  0","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
Creating new GPT entries.
Setting name!
partNum is 0
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[1].label'
9++ jq -r '.disks[0].partitions[1].label' /tmp/config.cpr
+ partlabel=SWAP
,++ stormeta 'disks[0].partitions[1].number'
:++ jq -r '.disks[0].partitions[1].number' /tmp/config.cpr

 + partnum=2
*++ stormeta 'disks[0].partitions[1].size'
8++ jq -r '.disks[0].partitions[1].size' /tmp/config.cpr
+ partsize=3993600
+ parttype=8300
D+ msg 'Working on /dev/sdd part 2 aka label SWAP with size 3993600'
R+ echo -e 'Working on /dev/sdd part 2 aka label SWAP with size 3993600' '\033[0m'
AWorking on /dev/sdd part 2 aka label SWAP with size 3993600 
+ [[ SWAP =~ BIOS ]]
+ [[ 3993600 =~ pct ]]
+ (( partsize == 0 ))
+ partsize=+3993600
6+ sgdisk -n 2:0:+3993600 -c 2:SWAP -t 2:8300 /dev/sdd
Setting name!
partNum is 1
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[2].label'
9++ jq -r '.disks[0].partitions[2].label' /tmp/config.cpr
+ partlabel=ROOT
,++ stormeta 'disks[0].partitions[2].number'
:++ jq -r '.disks[0].partitions[2].number' /tmp/config.cpr

 + partnum=3
*++ stormeta 'disks[0].partitions[2].size'
8++ jq -r '.disks[0].partitions[2].size' /tmp/config.cpr
+ partsize=0
+ parttype=8300
>+ msg 'Working on /dev/sdd part 3 aka label ROOT with size 0'
L+ echo -e 'Working on /dev/sdd part 3 aka label ROOT with size 0' '\033[0m'
;Working on /dev/sdd part 3 aka label ROOT with size 0 
+ [[ ROOT =~ BIOS ]]
+ [[ 0 =~ pct ]]
+ (( partsize == 0 ))
?+ msg 'Partsize is zero. This means use the rest of the disk.'
M+ echo -e 'Partsize is zero. This means use the rest of the disk.' '\033[0m'
<Partsize is zero. This means use the rest of the disk. 
/+ sgdisk -n 3:0:0 -c 3:ROOT -t 3:8300 /dev/sdd
Setting name!
partNum is 2
REALLY setting name!
*The operation has completed successfully.

 + diskcnt=1

 + raidcnt=0
+ for raid in '"${raids[@]}"'
+ [[ hack == \h\a\c\k ]]
+ break

+ fscnt=0
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd1'
7+ echo -e 'Writing filesystem for /dev/sdd1' '\033[0m'
&Writing filesystem for /dev/sdd1 
*++ stormeta 'filesystems[0].mount.format'
8++ jq -r '.filesystems[0].mount.format' /tmp/config.cpr
+ format=vfat
)++ stormeta 'filesystems[0].mount.point'
7++ jq -r '.filesystems[0].mount.point' /tmp/config.cpr
+ mpoint=/boot/efi
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[0].mount.create.options[]'
B++ jq -r '.filesystems[0].mount.create.options[]' /tmp/config.cpr

+ fscnt=1
E+ msg '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"'
S+ echo -e '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"' '\033[0m'
B/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi" 
+ [[ vfat == \b\i\o\s ]]
+ [[ vfat == \s\w\a\p ]]
#+ mkfs.vfat -F 32 -n EFI /dev/sdd1
mkfs.fat 3.0.28 (2015-05-16)
$++ blkid -s UUID -o value /dev/sdd1
+ thisdevuuid=34F7-D8B7
+ [[ /boot/efi == / ]]
(+ add_to_fstab 34F7-D8B7 /boot/efi vfat
[+ local UUID=34F7-D8B7 MOUNTPOINT=/boot/efi FSFORMAT=vfat options=errors=remount-ro fsck=2
%+ grep -qs 34F7-D8B7 /tmp/fstab.tmpl
+ [[ vfat == swap ]]
+ [[ /boot/efi == \/ ]]
E+ echo -e 'UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2'
+ tee -a /tmp/fstab.tmpl
4UUID=34F7-D8B7	/boot/efi	vfat	errors=remount-ro	0	2
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd3'
7+ echo -e 'Writing filesystem for /dev/sdd3' '\033[0m'
&Writing filesystem for /dev/sdd3 
*++ stormeta 'filesystems[1].mount.format'
8++ jq -r '.filesystems[1].mount.format' /tmp/config.cpr
+ format=ext4
)++ stormeta 'filesystems[1].mount.point'
7++ jq -r '.filesystems[1].mount.point' /tmp/config.cpr

 + mpoint=/
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[1].mount.create.options[]'
B++ jq -r '.filesystems[1].mount.create.options[]' /tmp/config.cpr

+ fscnt=2
;+ msg '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"'
I+ echo -e '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"' '\033[0m'
8/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/" 
+ [[ ext4 == \b\i\o\s ]]
+ [[ ext4 == \s\w\a\p ]]
!+ mkfs.ext4 -F -L ROOT /dev/sdd3
mke2fs 1.42.13 (17-May-2015)
9Discarding device blocks: done                            
?Creating filesystem with 28674673 4k blocks and 7176192 inodes
6Filesystem UUID: ae3f7757-9686-420a-ae18-3b3e4c14ad3c
&Superblock backups stored on blocks: 
J	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
0	4096000, 7962624, 11239424, 20480000, 23887872

VAllocating group tables: done                            
SWriting inode tables: done                            
&Creating journal (32768 blocks): done
\Writing superblocks and filesystem accounting information: done   

$++ blkid -s UUID -o value /dev/sdd3
3+ thisdevuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
+ [[ / == / ]]
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
;+ add_to_fstab ae3f7757-9686-420a-ae18-3b3e4c14ad3c / ext4
n+ local UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c MOUNTPOINT=/ FSFORMAT=ext4 options=errors=remount-ro fsck=2
@+ grep -qs ae3f7757-9686-420a-ae18-3b3e4c14ad3c /tmp/fstab.tmpl
+ [[ ext4 == swap ]]
+ [[ / == \/ ]]
	+ fsck=1
X+ echo -e 'UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1'
+ tee -a /tmp/fstab.tmpl
GUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c	/	ext4	errors=remount-ro	0	1
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd2'
7+ echo -e 'Writing filesystem for /dev/sdd2' '\033[0m'
&Writing filesystem for /dev/sdd2 
*++ stormeta 'filesystems[2].mount.format'
8++ jq -r '.filesystems[2].mount.format' /tmp/config.cpr
+ format=swap
)++ stormeta 'filesystems[2].mount.point'
7++ jq -r '.filesystems[2].mount.point' /tmp/config.cpr
+ mpoint=none
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[2].mount.create.options[]'
B++ jq -r '.filesystems[2].mount.create.options[]' /tmp/config.cpr

+ fscnt=3
>+ msg '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"'
L+ echo -e '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"' '\033[0m'
;/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none" 
+ [[ swap == \b\i\o\s ]]
+ [[ swap == \s\w\a\p ]]
+ mkswap /dev/sdd2
7mkswap: /dev/sdd2: warning: wiping old swap signature.
BSetting up swapspace version 1, size = 1.9 GiB (2044719104 bytes)
4no label, UUID=a836da53-4525-40af-86ae-a261d722eff4
$++ blkid -s UUID -o value /dev/sdd2
3+ thisdevuuid=a836da53-4525-40af-86ae-a261d722eff4
+ [[ none == / ]]
>+ add_to_fstab a836da53-4525-40af-86ae-a261d722eff4 none swap
q+ local UUID=a836da53-4525-40af-86ae-a261d722eff4 MOUNTPOINT=none FSFORMAT=swap options=errors=remount-ro fsck=2
@+ grep -qs a836da53-4525-40af-86ae-a261d722eff4 /tmp/fstab.tmpl
+ [[ swap == swap ]]
	+ fsck=0
+ options=none
+ [[ none == \/ ]]
N+ echo -e 'UUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0'
+ tee -a /tmp/fstab.tmpl
=UUID=a836da53-4525-40af-86ae-a261d722eff4	none	swap	none	0	0
+ cat

+ python3
&{"bootdevs": ["/dev/sdd"], "rootuuid": "ae3f7757-9686-420a-ae18-3b3e4c14ad3c", "fstab": "UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2\nUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1\nUUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0\n"}
D+ msg '\033[0;32m#### Mounting filesystems in fstab to /mnt/target'
R+ echo -e '\033[0;32m#### Mounting filesystems in fstab to /mnt/target' '\033[0m'
>#### Mounting filesystems in fstab to /mnt/target 
9+ sed -i 's|\(\S\)\t/|\1\t/mnt/target/|' /tmp/fstab.tmpl
+ read -r mnt
.++ awk '/\/mnt\// {print $2}' /tmp/fstab.tmpl
++ sort
+ mkdir -p /mnt/target/
-+ mount --fstab /tmp/fstab.tmpl /mnt/target/
+ read -r mnt
 + mkdir -p /mnt/target/boot/efi
5+ mount --fstab /tmp/fstab.tmpl /mnt/target/boot/efi
+ read -r mnt
+ mount
+ grep /mnt/target
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
P/dev/sdd3 on /mnt/target type ext4 (rw,relatime,errors=remount-ro,data=ordered)
�/dev/sdd1 on /mnt/target/boot/efi type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=utf8,shortname=mixed,errors=remount-ro)
+ mkdir -p /mnt/target/etc
+ touch /mnt/target/etc/fstab
"+ jq -r .fstab /statedir/cpr.json
<+ echo -e '\033[0;32m#### CPR disk config complete \033[0m'
*#### CPR disk config complete 
Creating new GPT entries.
Setting name!
partNum is 0
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[1].label'
9++ jq -r '.disks[0].partitions[1].label' /tmp/config.cpr
+ partlabel=SWAP
,++ stormeta 'disks[0].partitions[1].number'
:++ jq -r '.disks[0].partitions[1].number' /tmp/config.cpr

 + partnum=2
*++ stormeta 'disks[0].partitions[1].size'
8++ jq -r '.disks[0].partitions[1].size' /tmp/config.cpr
+ partsize=3993600
+ parttype=8300
D+ msg 'Working on /dev/sdd part 2 aka label SWAP with size 3993600'
R+ echo -e 'Working on /dev/sdd part 2 aka label SWAP with size 3993600' '\033[0m'
AWorking on /dev/sdd part 2 aka label SWAP with size 3993600 
+ [[ SWAP =~ BIOS ]]
+ [[ 3993600 =~ pct ]]
+ (( partsize == 0 ))
+ partsize=+3993600
6+ sgdisk -n 2:0:+3993600 -c 2:SWAP -t 2:8300 /dev/sdd
Setting name!
partNum is 1
REALLY setting name!
*The operation has completed successfully.
2+ for partcnt in '$(seq 0 $((${#parts[@]} - 1)))'
+++ stormeta 'disks[0].partitions[2].label'
9++ jq -r '.disks[0].partitions[2].label' /tmp/config.cpr
+ partlabel=ROOT
,++ stormeta 'disks[0].partitions[2].number'
:++ jq -r '.disks[0].partitions[2].number' /tmp/config.cpr

 + partnum=3
*++ stormeta 'disks[0].partitions[2].size'
8++ jq -r '.disks[0].partitions[2].size' /tmp/config.cpr
+ partsize=0
+ parttype=8300
>+ msg 'Working on /dev/sdd part 3 aka label ROOT with size 0'
L+ echo -e 'Working on /dev/sdd part 3 aka label ROOT with size 0' '\033[0m'
;Working on /dev/sdd part 3 aka label ROOT with size 0 
+ [[ ROOT =~ BIOS ]]
+ [[ 0 =~ pct ]]
+ (( partsize == 0 ))
?+ msg 'Partsize is zero. This means use the rest of the disk.'
M+ echo -e 'Partsize is zero. This means use the rest of the disk.' '\033[0m'
<Partsize is zero. This means use the rest of the disk. 
/+ sgdisk -n 3:0:0 -c 3:ROOT -t 3:8300 /dev/sdd
Setting name!
partNum is 2
REALLY setting name!
*The operation has completed successfully.

 + diskcnt=1

 + raidcnt=0
+ for raid in '"${raids[@]}"'
+ [[ hack == \h\a\c\k ]]
+ break

+ fscnt=0
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd1'
7+ echo -e 'Writing filesystem for /dev/sdd1' '\033[0m'
&Writing filesystem for /dev/sdd1 
*++ stormeta 'filesystems[0].mount.format'
8++ jq -r '.filesystems[0].mount.format' /tmp/config.cpr
+ format=vfat
)++ stormeta 'filesystems[0].mount.point'
7++ jq -r '.filesystems[0].mount.point' /tmp/config.cpr
+ mpoint=/boot/efi
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[0].mount.create.options[]'
B++ jq -r '.filesystems[0].mount.create.options[]' /tmp/config.cpr

+ fscnt=1
E+ msg '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"'
S+ echo -e '/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi"' '\033[0m'
B/dev/sdd1: format=vfat fsopts="32 -n EFI" mpoint="/boot/efi" 
+ [[ vfat == \b\i\o\s ]]
+ [[ vfat == \s\w\a\p ]]
#+ mkfs.vfat -F 32 -n EFI /dev/sdd1
mkfs.fat 3.0.28 (2015-05-16)
$++ blkid -s UUID -o value /dev/sdd1
+ thisdevuuid=34F7-D8B7
+ [[ /boot/efi == / ]]
(+ add_to_fstab 34F7-D8B7 /boot/efi vfat
[+ local UUID=34F7-D8B7 MOUNTPOINT=/boot/efi FSFORMAT=vfat options=errors=remount-ro fsck=2
%+ grep -qs 34F7-D8B7 /tmp/fstab.tmpl
+ [[ vfat == swap ]]
+ [[ /boot/efi == \/ ]]
E+ echo -e 'UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2'
+ tee -a /tmp/fstab.tmpl
4UUID=34F7-D8B7	/boot/efi	vfat	errors=remount-ro	0	2
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd3'
7+ echo -e 'Writing filesystem for /dev/sdd3' '\033[0m'
&Writing filesystem for /dev/sdd3 
*++ stormeta 'filesystems[1].mount.format'
8++ jq -r '.filesystems[1].mount.format' /tmp/config.cpr
+ format=ext4
)++ stormeta 'filesystems[1].mount.point'
7++ jq -r '.filesystems[1].mount.point' /tmp/config.cpr

 + mpoint=/
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[1].mount.create.options[]'
B++ jq -r '.filesystems[1].mount.create.options[]' /tmp/config.cpr

+ fscnt=2
;+ msg '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"'
I+ echo -e '/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/"' '\033[0m'
8/dev/sdd3: format=ext4 fsopts="-L ROOT" mpoint="/" 
+ [[ ext4 == \b\i\o\s ]]
+ [[ ext4 == \s\w\a\p ]]
!+ mkfs.ext4 -F -L ROOT /dev/sdd3
mke2fs 1.42.13 (17-May-2015)
9Discarding device blocks: done                            
?Creating filesystem with 28674673 4k blocks and 7176192 inodes
6Filesystem UUID: ae3f7757-9686-420a-ae18-3b3e4c14ad3c
&Superblock backups stored on blocks: 
J	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
0	4096000, 7962624, 11239424, 20480000, 23887872

VAllocating group tables: done                            
SWriting inode tables: done                            
&Creating journal (32768 blocks): done
\Writing superblocks and filesystem accounting information: done   

$++ blkid -s UUID -o value /dev/sdd3
3+ thisdevuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
+ [[ / == / ]]
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
;+ add_to_fstab ae3f7757-9686-420a-ae18-3b3e4c14ad3c / ext4
n+ local UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c MOUNTPOINT=/ FSFORMAT=ext4 options=errors=remount-ro fsck=2
@+ grep -qs ae3f7757-9686-420a-ae18-3b3e4c14ad3c /tmp/fstab.tmpl
+ [[ ext4 == swap ]]
+ [[ / == \/ ]]
	+ fsck=1
X+ echo -e 'UUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1'
+ tee -a /tmp/fstab.tmpl
GUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c	/	ext4	errors=remount-ro	0	1
 + for fsdev in '"${fsdevs[@]}"'
)+ msg 'Writing filesystem for /dev/sdd2'
7+ echo -e 'Writing filesystem for /dev/sdd2' '\033[0m'
&Writing filesystem for /dev/sdd2 
*++ stormeta 'filesystems[2].mount.format'
8++ jq -r '.filesystems[2].mount.format' /tmp/config.cpr
+ format=swap
)++ stormeta 'filesystems[2].mount.point'
7++ jq -r '.filesystems[2].mount.point' /tmp/config.cpr
+ mpoint=none
D+ fsopts=($(stormeta "filesystems[$fscnt].mount.create.options[]"))
4++ stormeta 'filesystems[2].mount.create.options[]'
B++ jq -r '.filesystems[2].mount.create.options[]' /tmp/config.cpr

+ fscnt=3
>+ msg '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"'
L+ echo -e '/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none"' '\033[0m'
;/dev/sdd2: format=swap fsopts="-L SWAP" mpoint="none" 
+ [[ swap == \b\i\o\s ]]
+ [[ swap == \s\w\a\p ]]
+ mkswap /dev/sdd2
7mkswap: /dev/sdd2: warning: wiping old swap signature.
BSetting up swapspace version 1, size = 1.9 GiB (2044719104 bytes)
4no label, UUID=a836da53-4525-40af-86ae-a261d722eff4
$++ blkid -s UUID -o value /dev/sdd2
3+ thisdevuuid=a836da53-4525-40af-86ae-a261d722eff4
+ [[ none == / ]]
>+ add_to_fstab a836da53-4525-40af-86ae-a261d722eff4 none swap
q+ local UUID=a836da53-4525-40af-86ae-a261d722eff4 MOUNTPOINT=none FSFORMAT=swap options=errors=remount-ro fsck=2
@+ grep -qs a836da53-4525-40af-86ae-a261d722eff4 /tmp/fstab.tmpl
+ [[ swap == swap ]]
	+ fsck=0
+ options=none
+ [[ none == \/ ]]
N+ echo -e 'UUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0'
+ tee -a /tmp/fstab.tmpl
=UUID=a836da53-4525-40af-86ae-a261d722eff4	none	swap	none	0	0
+ cat

+ python3
&{"bootdevs": ["/dev/sdd"], "rootuuid": "ae3f7757-9686-420a-ae18-3b3e4c14ad3c", "fstab": "UUID=34F7-D8B7\t/boot/efi\tvfat\terrors=remount-ro\t0\t2\nUUID=ae3f7757-9686-420a-ae18-3b3e4c14ad3c\t/\text4\terrors=remount-ro\t0\t1\nUUID=a836da53-4525-40af-86ae-a261d722eff4\tnone\tswap\tnone\t0\t0\n"}
D+ msg '\033[0;32m#### Mounting filesystems in fstab to /mnt/target'
R+ echo -e '\033[0;32m#### Mounting filesystems in fstab to /mnt/target' '\033[0m'
>#### Mounting filesystems in fstab to /mnt/target 
9+ sed -i 's|\(\S\)\t/|\1\t/mnt/target/|' /tmp/fstab.tmpl
{"level":"info","msg":"Container removed with Status  ACTION_SUCCESS","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Action container exits with status code  ACTION_SUCCESS","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
+ read -r mnt
.++ awk '/\/mnt\// {print $2}' /tmp/fstab.tmpl
++ sort
+ mkdir -p /mnt/target/
-+ mount --fstab /tmp/fstab.tmpl /mnt/target/
+ read -r mnt
 + mkdir -p /mnt/target/boot/efi
5+ mount --fstab /tmp/fstab.tmpl /mnt/target/boot/efi
+ read -r mnt
+ mount
+ grep /mnt/target
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
P/dev/sdd3 on /mnt/target type ext4 (rw,relatime,errors=remount-ro,data=ordered)
�/dev/sdd1 on /mnt/target/boot/efi type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=utf8,shortname=mixed,errors=remount-ro)
+ mkdir -p /mnt/target/etc
+ touch /mnt/target/etc/fstab
"+ jq -r .fstab /statedir/cpr.json
<+ echo -e '\033[0;32m#### CPR disk config complete \033[0m'
*#### CPR disk config complete 
{"level":"info","msg":"Sent action status workflow_id:\"cdc7d140-6f3e-4285-8303-668f670ce145\" task_name:\"os-installation\" action_name:\"disk-partition\" action_status:ACTION_SUCCESS seconds:18 message:\"Finished Execution Successfully\" worker_id:\"fde7c87c-d154-447e-9fce-7eb7bdec90c0\" \n","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"action_name":"fetch-assets","level":"info","msg":"Sent action status  ACTION_IN_PROGRESS","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"status":"Pulling from fetch-assets","id":"latest"}
{"status":"Already exists","progressDetail":{},"id":"0a01a72a686c"}
{"status":"Already exists","progressDetail":{},"id":"cc899a5544da"}
{"status":"Already exists","progressDetail":{},"id":"19197c550755"}
{"status":"Already exists","progressDetail":{},"id":"716d454e56b6"}
{"status":"Already exists","progressDetail":{},"id":"2c0f403b937f"}
{"status":"Already exists","progressDetail":{},"id":"757c0ee525f8"}
{"status":"Already exists","progressDetail":{},"id":"88e669c5c0a9"}
{"status":"Already exists","progressDetail":{},"id":"398160ccbc08"}
{"status":"Already exists","progressDetail":{},"id":"4b30a4963a8a"}
{"status":"Already exists","progressDetail":{},"id":"eb38adee6edf"}
{"status":"Already exists","progressDetail":{},"id":"101bc484189a"}
{"status":"Already exists","progressDetail":{},"id":"c565e78fc7c7"}
{"status":"Already exists","progressDetail":{},"id":"87e498916cc4"}
{"status":"Pulling fs layer","progressDetail":{},"id":"514db6dddc16"}
{"status":"Downloading","progressDetail":{"current":730,"total":1419},"progress":"[=========================\u003e                         ]     730B/1.419kB","id":"514db6dddc16"}
{"status":"Downloading","progressDetail":{"current":1419,"total":1419},"progress":"[==================================================\u003e]  1.419kB/1.419kB","id":"514db6dddc16"}
{"status":"Verifying Checksum","progressDetail":{},"id":"514db6dddc16"}
{"status":"Download complete","progressDetail":{},"id":"514db6dddc16"}
{"status":"Extracting","progressDetail":{"current":1419,"total":1419},"progress":"[==================================================\u003e]  1.419kB/1.419kB","id":"514db6dddc16"}
{"status":"Extracting","progressDetail":{"current":1419,"total":1419},"progress":"[==================================================\u003e]  1.419kB/1.419kB","id":"514db6dddc16"}
{"status":"Pull complete","progressDetail":{},"id":"514db6dddc16"}
{"status":"Digest: sha256:a6b926e02583a9b4cf33e7e38fda4204b62061b368d8c7fdba56a66d415d689c"}
{"status":"Status: Downloaded newer image for 192.168.1.1/fetch-assets:latest"}
{"level":"info","msg":"Starting the container with cmd []","time":"2020-02-11T04:53:50Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
/+ BASEURL=http://192.168.1.2/misc/osie/current
Z+ grub=http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
=+ echo -e '\033[0;37mImage: /tmp/assets/image.tar.gz\033[0m'
+Image: /tmp/assets/image.tar.gz
/Modules: /tmp/assets/modules.tar.gz
-Kernel: /tmp/assets/kernel.tar.gz
-Initrd: /tmp/assets/initrd.tar.gz
A+ echo -e '\033[0;37mModules: /tmp/assets/modules.tar.gz\033[0m'
?+ echo -e '\033[0;37mKernel: /tmp/assets/kernel.tar.gz\033[0m'
?+ echo -e '\033[0;37mInitrd: /tmp/assets/initrd.tar.gz\033[0m'
#+ echo -e '\033[0;37mCPR: \033[0m'
+ ls -l /tmp/assets
CPR: 
total 541008
;-rw-r--r-- 1 root root 441910496 Feb  6 12:18 image.tar.gz
<-rw-r--r-- 1 root root  38812262 Feb  6 12:18 initrd.tar.gz
<-rw-r--r-- 1 root root   7927568 Feb  6 12:18 kernel.tar.gz
=-rw-r--r-- 1 root root  65333762 Feb  6 12:18 modules.tar.gz
a+ echo -e '\033[0;32m#### Retrieving image archive and installing to target /mnt/target \033[0m'
O#### Retrieving image archive and installing to target /mnt/target 
�+ tar --xattrs --acls --selinux --numeric-owner --same-owner --warning=no-timestamp -zxpf /tmp/assets/image.tar.gz -C /mnt/target
<+ echo -e '\033[0;32m#### Fetching assets complete \033[0m'
*#### Fetching assets complete 
{"level":"info","msg":"Container with id  f79aa093f76c2c6e43bcafa6a3f1f7872bde25439da02b959924694c20e544ee finished with status code :  0","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
/+ BASEURL=http://192.168.1.2/misc/osie/current
Z+ grub=http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
=+ echo -e '\033[0;37mImage: /tmp/assets/image.tar.gz\033[0m'
+Image: /tmp/assets/image.tar.gz
/Modules: /tmp/assets/modules.tar.gz
-Kernel: /tmp/assets/kernel.tar.gz
-Initrd: /tmp/assets/initrd.tar.gz
A+ echo -e '\033[0;37mModules: /tmp/assets/modules.tar.gz\033[0m'
?+ echo -e '\033[0;37mKernel: /tmp/assets/kernel.tar.gz\033[0m'
?+ echo -e '\033[0;37mInitrd: /tmp/assets/initrd.tar.gz\033[0m'
#+ echo -e '\033[0;37mCPR: \033[0m'
+ ls -l /tmp/assets
CPR: 
total 541008
;-rw-r--r-- 1 root root 441910496 Feb  6 12:18 image.tar.gz
<-rw-r--r-- 1 root root  38812262 Feb  6 12:18 initrd.tar.gz
<-rw-r--r-- 1 root root   7927568 Feb  6 12:18 kernel.tar.gz
=-rw-r--r-- 1 root root  65333762 Feb  6 12:18 modules.tar.gz
a+ echo -e '\033[0;32m#### Retrieving image archive and installing to target /mnt/target \033[0m'
O#### Retrieving image archive and installing to target /mnt/target 
�+ tar --xattrs --acls --selinux --numeric-owner --same-owner --warning=no-timestamp -zxpf /tmp/assets/image.tar.gz -C /mnt/target
<+ echo -e '\033[0;32m#### Fetching assets complete \033[0m'
*#### Fetching assets complete 
/+ BASEURL=http://192.168.1.2/misc/osie/current
Z+ grub=http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
=+ echo -e '\033[0;37mImage: /tmp/assets/image.tar.gz\033[0m'
+Image: /tmp/assets/image.tar.gz
/Modules: /tmp/assets/modules.tar.gz
-Kernel: /tmp/assets/kernel.tar.gz
-Initrd: /tmp/assets/initrd.tar.gz
A+ echo -e '\033[0;37mModules: /tmp/assets/modules.tar.gz\033[0m'
?+ echo -e '\033[0;37mKernel: /tmp/assets/kernel.tar.gz\033[0m'
?+ echo -e '\033[0;37mInitrd: /tmp/assets/initrd.tar.gz\033[0m'
#+ echo -e '\033[0;37mCPR: \033[0m'
+ ls -l /tmp/assets
CPR: 
total 541008
;-rw-r--r-- 1 root root 441910496 Feb  6 12:18 image.tar.gz
<-rw-r--r-- 1 root root  38812262 Feb  6 12:18 initrd.tar.gz
<-rw-r--r-- 1 root root   7927568 Feb  6 12:18 kernel.tar.gz
=-rw-r--r-- 1 root root  65333762 Feb  6 12:18 modules.tar.gz
a+ echo -e '\033[0;32m#### Retrieving image archive and installing to target /mnt/target \033[0m'
O#### Retrieving image archive and installing to target /mnt/target 
�+ tar --xattrs --acls --selinux --numeric-owner --same-owner --warning=no-timestamp -zxpf /tmp/assets/image.tar.gz -C /mnt/target
<+ echo -e '\033[0;32m#### Fetching assets complete \033[0m'
*#### Fetching assets complete 
{"level":"info","msg":"Container removed with Status  ACTION_SUCCESS","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Action container exits with status code  ACTION_SUCCESS","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Sent action status workflow_id:\"cdc7d140-6f3e-4285-8303-668f670ce145\" task_name:\"os-installation\" action_name:\"fetch-assets\" action_status:ACTION_SUCCESS seconds:9 message:\"Finished Execution Successfully\" worker_id:\"fde7c87c-d154-447e-9fce-7eb7bdec90c0\" \n","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"action_name":"install-grub","level":"info","msg":"Sent action status  ACTION_IN_PROGRESS","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"status":"Pulling from install-grub","id":"latest"}
{"status":"Digest: sha256:1fdd6e80c3f7f3d9abce599e025fc6ce6d03c8e119b162887b833c1aab091d35"}
{"status":"Status: Image is up to date for 192.168.1.1/install-grub:latest"}
{"level":"info","msg":"Starting the container with cmd []","time":"2020-02-11T04:54:00Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
+ set -o nounset
+ metadata=/metadata
F+ curl -sSL --connect-timeout 60 https://metadata.packet.net/metadata
@+ disks=($(lsblk -dno name -e1,7,11 | sed 's|^|/dev/|' | sort))
++ lsblk -dno name -e1,7,11
++ sed 's|^|/dev/|'
++ sort
+ userdata=/dev/null

 ++ uname -m
+ arch=x86_64
2+ check_required_arg /metadata 'metadata file' -M
+ arg=/metadata
+ name='metadata file'

 + switch=-M
+ [[ -n /metadata ]]

 + return 0
+ declare class
 + set_from_metadata class class
+ local var=class key=class

 + local val
+++ jq -r 'select(.class != null) | .class'
+ val=c2.medium.x86
+ [[ -z c2.medium.x86 ]]
!+ declare -g class=c2.medium.x86
+ declare facility
&+ set_from_metadata facility facility
"+ local var=facility key=facility

 + local val
1++ jq -r 'select(.facility != null) | .facility'

 + val=ewr1
+ [[ -z ewr1 ]]
+ declare -g facility=ewr1
+ declare os
-+ set_from_metadata os operating_system.slug
)+ local var=os key=operating_system.slug

 + local val
K++ jq -r 'select(.operating_system.slug != null) | .operating_system.slug'
+ val=ubuntu_18_04
+ [[ -z ubuntu_18_04 ]]
+ declare -g os=ubuntu_18_04
+ declare tag
3+ set_from_metadata tag operating_system.image_tag
/+ local var=tag key=operating_system.image_tag

 + local val
U++ jq -r 'select(.operating_system.image_tag != null) | .operating_system.image_tag'
/+ val=f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
4+ [[ -z f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6 ]]
:+ declare -g tag=f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
;+ OS=ubuntu_18_04:f8ed0b0456a92b125657e5b64e35a4e5b0cdbcd6
#+ echo 'Number of drives found: 4'
Number of drives found: 4
+ (( 4 != 0 ))
)+ echo 'Disk candidate check successful'
+ custom_image=false
+ target=/mnt/target
+ cprout=/statedir/cpr.json
 Disk candidate check successful
5+ [[ -f /statedir/disks-partioned-image-extracted ]]
+ assetdir=/tmp/assets
+ OS=ubuntu_18_04
+ ls -l /tmp/assets
total 541008
;-rw-r--r-- 1 root root 441910496 Feb  6 12:18 image.tar.gz
<-rw-r--r-- 1 root root  38812262 Feb  6 12:18 initrd.tar.gz
<-rw-r--r-- 1 root root   7927568 Feb  6 12:18 kernel.tar.gz
=-rw-r--r-- 1 root root  65333762 Feb  6 12:18 modules.tar.gz
#+ kernel=/tmp/assets/kernel.tar.gz
#+ initrd=/tmp/assets/initrd.tar.gz
%+ modules=/tmp/assets/modules.tar.gz
!+ image=/tmp/assets/image.tar.gz
/+ BASEURL=http://192.168.1.2/misc/osie/current
Z+ grub=http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
<+ mkdir -p /mnt/target/dev /mnt/target/proc /mnt/target/sys
!+ mkdir -p /mnt/target/etc/mdadm
2+ [[ c2.medium.x86 != \t\1\.\s\m\a\l\l\.\x\8\6 ]]
@+ echo -e '\033[0;32m#### Updating MD RAID config file \033[0m'
.#### Updating MD RAID config file 
+ mdadm --examine --scan
5+ echo -e '\033[0;32m#### Setting machine-id\033[0m'
G+ rm -f /mnt/target/etc/machine-id /mnt/target/var/lib/dbus/machine-id
##### Setting machine-id
.+ systemd-machine-id-setup --root=/mnt/target
/Initializing machine ID from random generator.
!+ cat /mnt/target/etc/machine-id
!82b4131c98ca48149c0ef3564d54ced4
$+ [[ -d /mnt/target/var/lib/dbus ]]
>+ ln -nsf /etc/machine-id /mnt/target/var/lib/dbus/machine-id
]+ echo -e '\033[0;32m#### Copying kernel, modules, and initrd to target /mnt/target \033[0m'
K#### Copying kernel, modules, and initrd to target /mnt/target 
P+ tar --warning=no-timestamp -zxf /tmp/assets/kernel.tar.gz -C /mnt/target/boot
,++ vmlinuz_version /mnt/target/boot/vmlinuz
)++ local kernel=/mnt/target/boot/vmlinuz
++ set +o pipefail
%+++ file -b /mnt/target/boot/vmlinuz
�++ type='Linux kernel x86 boot executable bzImage, version 4.15.0-50-generic (buildd@lcy01-amd64-013) #54-Ubuntu SMP Mon M, RO-rootFS, swap_dev 0x7, Normal VGA'
++ case "$type" in
!++ echo 'kernel is type bzImage'
kernel is type bzImage
�++ echo 'Linux kernel x86 boot executable bzImage, version 4.15.0-50-generic (buildd@lcy01-amd64-013) #54-Ubuntu SMP Mon M, RO-rootFS, swap_dev 0x7, Normal VGA'
'++ sed 's|.*, version \(\S\+\) .*|\1|'
++ set -o pipefail
+ kversion=4.15.0-50-generic
+ [[ -z 4.15.0-50-generic ]]
'+ kernelname=vmlinuz-4.15.0-50-generic
 + [[ ubuntu_18_04 =~ ^centos ]]
+ [[ ubuntu_18_04 =~ ^rhel ]]
*+ initrdname=initrd.img-4.15.0-50-generic
+ modulesdest=
I+ mv /mnt/target/boot/vmlinuz /mnt/target/boot/vmlinuz-4.15.0-50-generic
=+ ln -nsf vmlinuz-4.15.0-50-generic /mnt/target/boot/vmlinuz
<+ tar --warning=no-timestamp -zxf /tmp/assets/initrd.tar.gz
:+ mv initrd /mnt/target/boot/initrd.img-4.15.0-50-generic
?+ ln -nsf initrd.img-4.15.0-50-generic /mnt/target/boot/initrd
M+ tar --warning=no-timestamp -zxf /tmp/assets/modules.tar.gz -C /mnt/target/
A+ cp /mnt/target/boot/vmlinuz-4.15.0-50-generic /statedir/kernel
D+ cp /mnt/target/boot/initrd.img-4.15.0-50-generic /statedir/initrd
3+ echo -e '\033[0;32m#### Installing GRUB2\033[0m'
p+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template -O /tmp/grub.template
!#### Installing GRUB2
l--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
/Length: 2202 (2.2K) [application/octet-stream]
 Saving to: '/tmp/grub.template'

L     0K ..                                                    100%  499M=0s

H2020-02-11 04:54:02 (499 MB/s) - '/tmp/grub.template' saved [2202/2202]

w+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default -O /tmp/grub.default
t--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
'Length: 168 [application/octet-stream]
Saving to: '/tmp/grub.default'

L     0K                                                       100% 39.4M=0s

F2020-02-11 04:54:02 (39.4 MB/s) - '/tmp/grub.default' saved [168/168]

7+ mount -t efivarfs efivarfs /sys/firmware/efi/efivars
+ mount
�overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ZF6ITVZ6A4LKBQRGDJZCUF7FV3:/var/lib/docker/overlay2/l/BA74WCZKD73W7ONK2VG7BA6FAB:/var/lib/docker/overlay2/l/M7WK5JON5UOCJUTADKR3JTIDEE:/var/lib/docker/overlay2/l/KM6CJNP3CIQABTBGTU4HJQK3UP:/var/lib/docker/overlay2/l/G66TFE6T5HJPATMEDI45XMM3GA:/var/lib/docker/overlay2/l/BBYKXHCY7TD4XDNTRZJPTBT6TK:/var/lib/docker/overlay2/l/2ARNEQ7QLNPA25EGOZH7O5H7BO:/var/lib/docker/overlay2/l/WZDUGLWPKO47DQUCXVZZFRVSEW:/var/lib/docker/overlay2/l/LVEBUE66F3BCHY7WWH7VJUQ6YH:/var/lib/docker/overlay2/l/6VYQU42IYZPDBEN7IQURX4WYDI:/var/lib/docker/overlay2/l/6UYOO2UW47DURTYFZ7KXYKEQQX:/var/lib/docker/overlay2/l/LROHBLGGR636TSAPN5GQMNFIKE:/var/lib/docker/overlay2/l/3JUDEU5QN6S4SPI2LPANNTUC5L:/var/lib/docker/overlay2/l/U2PMHQGRASO7BNMGTJLHACHWM4,upperdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/diff,workdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/work)
:proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
;sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
Ntmpfs on /sys/fs/cgroup type tmpfs (rw,nosuid,nodev,noexec,relatime,mode=755)
�openrc on /sys/fs/cgroup/openrc type cgroup (rw,nosuid,nodev,noexec,relatime,release_agent=/lib/rc/sh/cgroup-release-agent.sh,name=openrc)
Ucpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
Lcpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
Xcpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
Rblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
Umemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
Xdevices on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
Xfreezer on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
Xnet_cls on /sys/fs/cgroup/net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
[net_prio on /sys/fs/cgroup/net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
Opids on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
5tmpfs on /workflow type tmpfs (rw,relatime,mode=755)
0tmpfs on /mnt type tmpfs (rw,relatime,mode=755)
5tmpfs on /statedir type tmpfs (rw,relatime,mode=755)
3tmpfs on /worker type tmpfs (rw,relatime,mode=755)
[devtmpfs on /dev type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
Wdevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
=shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime)
Dmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)
A/lib/modloop-x86_64 on /lib/firmware type squashfs (ro,relatime)
cdevtmpfs on /dev/console type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
7tmpfs on /tmp/assets type tmpfs (rw,relatime,mode=755)
<tmpfs on /etc/resolv.conf type tmpfs (rw,relatime,mode=755)
9tmpfs on /etc/hostname type tmpfs (rw,relatime,mode=755)
6tmpfs on /etc/hosts type tmpfs (rw,relatime,mode=755)
Ishm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)
Befivarfs on /sys/firmware/efi/efivars type efivarfs (rw,relatime)
z+ ./grub-installer.sh -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
K+ USAGE='Usage: ./grub-installer.sh -t /mnt/target -C /path/to/cprout.json
Required Arguments:
-	-p plan      Server plan (ex: t1.small.x86)
5	-t target    Target mount point to write configs to
9	-C path      Path to file containing cpr.sh output json
,	-D path      Path to grub.default template
(	-T path      Path to grub.cfg template

	Options:
 	-h           This help message
5	-v           Turn on verbose messages for debugging

CDescription: This script will configure grub for the target distro
'
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
	+ set -x
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ plan=c2.medium.x86
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ target=/mnt/target
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ cprout=/statedir/cpr.json
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
!+ default_path=/tmp/grub.default
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
#+ template_path=/tmp/grub.template
+ getopts p:t:C:D:T:hv OPTION
�+ assert_all_args_consumed 12 -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
+ local index=12
+ shift
+ (( index != 11 + 1 ))
$+ grep -qs /mnt/target /proc/mounts
$+ echo 'Target is mounted... good.'
Target is mounted... good.
+ rm -rf /mnt/target/boot/grub
"+ [[ -d /mnt/target/boot/grub2 ]]
'+ ln -nsfT grub2 /mnt/target/boot/grub
&++ jq -r .rootuuid /statedir/cpr.json
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
0+ [[ -n ae3f7757-9686-420a-ae18-3b3e4c14ad3c ]]
S+ sed s/PACKET_ROOT_UUID/ae3f7757-9686-420a-ae18-3b3e4c14ad3c/g /tmp/grub.template
F++ sed -nr 's|GRUB_CMDLINE_LINUX='\''(.*)'\''|\1|p' /tmp/grub.default
L+ cmdline='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
s+ echo -e '\033[0;33;5;7mDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1\033[0m'
aDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1
*+ sed -i 's|^|export |' /tmp/grub.default
+ source /tmp/grub.default
_++ export 'GRUB_CMDLINE_LINUX=console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
X++ GRUB_CMDLINE_LINUX='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
]++ export 'GRUB_SERIAL_COMMAND=serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
V++ GRUB_SERIAL_COMMAND='serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
++ awk '{print $1}'
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ GRUB_DISTRIBUTOR=Ubuntu

 + envsubst

+ is_uefi
+ [[ -d /sys/firmware/efi ]]

 + uefi=true

 ++ uname -m
+ arch=x86_64
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ os_ver='Ubuntu 18.04'
+ set -- Ubuntu 18.04
+ DOS=Ubuntu
+ DVER=18.04
8+ echo '#### Detected OS on mounted target /mnt/target'
-+ echo 'OS: Ubuntu  ARCH: x86_64 VER: 18.04'
+ chroot_install=false
/#### Detected OS on mounted target /mnt/target
$OS: Ubuntu  ARCH: x86_64 VER: 18.04
?+ [[ Ubuntu == \R\e\d\H\a\t\E\n\t\e\r\p\r\i\s\e\S\e\r\v\e\r ]]
4+ [[ c2.medium.x86 == \c\3\.\m\e\d\i\u\m\.\x\8\6 ]]
*++ jq -r '.bootdevs[]' /statedir/cpr.json
+ bootdevs=/dev/sdd
+ [[ -n /dev/sdd ]]
+ for disk in '$bootdevs'
+ false
+ install_grub_osie
*+ echo 'Running grub-install on /dev/sdd'
+ true
+ [[ x86_64 == aarch64 ]]
!Running grub-install on /dev/sdd
p+ grub-install --recheck --bootloader-id=GRUB --root-directory=/mnt/target --efi-directory=/mnt/target/boot/efi
$Installing for x86_64-efi platform.
>grub-install: error: failed to get canonical path of `tmpfs'.
{"level":"info","msg":"Container with id  490a27d09622abecd25f0362472bb5a5de751ccdad833477dadd3a994089ee99 finished with status code :  1","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
:+ mv initrd /mnt/target/boot/initrd.img-4.15.0-50-generic
?+ ln -nsf initrd.img-4.15.0-50-generic /mnt/target/boot/initrd
M+ tar --warning=no-timestamp -zxf /tmp/assets/modules.tar.gz -C /mnt/target/
A+ cp /mnt/target/boot/vmlinuz-4.15.0-50-generic /statedir/kernel
D+ cp /mnt/target/boot/initrd.img-4.15.0-50-generic /statedir/initrd
3+ echo -e '\033[0;32m#### Installing GRUB2\033[0m'
p+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template -O /tmp/grub.template
!#### Installing GRUB2
l--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
/Length: 2202 (2.2K) [application/octet-stream]
 Saving to: '/tmp/grub.template'

L     0K ..                                                    100%  499M=0s

H2020-02-11 04:54:02 (499 MB/s) - '/tmp/grub.template' saved [2202/2202]

w+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default -O /tmp/grub.default
t--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
'Length: 168 [application/octet-stream]
Saving to: '/tmp/grub.default'

L     0K                                                       100% 39.4M=0s

F2020-02-11 04:54:02 (39.4 MB/s) - '/tmp/grub.default' saved [168/168]

7+ mount -t efivarfs efivarfs /sys/firmware/efi/efivars
+ mount
�overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ZF6ITVZ6A4LKBQRGDJZCUF7FV3:/var/lib/docker/overlay2/l/BA74WCZKD73W7ONK2VG7BA6FAB:/var/lib/docker/overlay2/l/M7WK5JON5UOCJUTADKR3JTIDEE:/var/lib/docker/overlay2/l/KM6CJNP3CIQABTBGTU4HJQK3UP:/var/lib/docker/overlay2/l/G66TFE6T5HJPATMEDI45XMM3GA:/var/lib/docker/overlay2/l/BBYKXHCY7TD4XDNTRZJPTBT6TK:/var/lib/docker/overlay2/l/2ARNEQ7QLNPA25EGOZH7O5H7BO:/var/lib/docker/overlay2/l/WZDUGLWPKO47DQUCXVZZFRVSEW:/var/lib/docker/overlay2/l/LVEBUE66F3BCHY7WWH7VJUQ6YH:/var/lib/docker/overlay2/l/6VYQU42IYZPDBEN7IQURX4WYDI:/var/lib/docker/overlay2/l/6UYOO2UW47DURTYFZ7KXYKEQQX:/var/lib/docker/overlay2/l/LROHBLGGR636TSAPN5GQMNFIKE:/var/lib/docker/overlay2/l/3JUDEU5QN6S4SPI2LPANNTUC5L:/var/lib/docker/overlay2/l/U2PMHQGRASO7BNMGTJLHACHWM4,upperdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/diff,workdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/work)
:proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
;sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
Ntmpfs on /sys/fs/cgroup type tmpfs (rw,nosuid,nodev,noexec,relatime,mode=755)
�openrc on /sys/fs/cgroup/openrc type cgroup (rw,nosuid,nodev,noexec,relatime,release_agent=/lib/rc/sh/cgroup-release-agent.sh,name=openrc)
Ucpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
Lcpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
Xcpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
Rblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
Umemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
Xdevices on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
Xfreezer on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
Xnet_cls on /sys/fs/cgroup/net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
[net_prio on /sys/fs/cgroup/net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
Opids on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
5tmpfs on /workflow type tmpfs (rw,relatime,mode=755)
0tmpfs on /mnt type tmpfs (rw,relatime,mode=755)
5tmpfs on /statedir type tmpfs (rw,relatime,mode=755)
3tmpfs on /worker type tmpfs (rw,relatime,mode=755)
[devtmpfs on /dev type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
Wdevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
=shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime)
Dmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)
A/lib/modloop-x86_64 on /lib/firmware type squashfs (ro,relatime)
cdevtmpfs on /dev/console type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
7tmpfs on /tmp/assets type tmpfs (rw,relatime,mode=755)
<tmpfs on /etc/resolv.conf type tmpfs (rw,relatime,mode=755)
9tmpfs on /etc/hostname type tmpfs (rw,relatime,mode=755)
6tmpfs on /etc/hosts type tmpfs (rw,relatime,mode=755)
Ishm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)
Befivarfs on /sys/firmware/efi/efivars type efivarfs (rw,relatime)
z+ ./grub-installer.sh -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
K+ USAGE='Usage: ./grub-installer.sh -t /mnt/target -C /path/to/cprout.json
Required Arguments:
-	-p plan      Server plan (ex: t1.small.x86)
5	-t target    Target mount point to write configs to
9	-C path      Path to file containing cpr.sh output json
,	-D path      Path to grub.default template
(	-T path      Path to grub.cfg template

	Options:
 	-h           This help message
5	-v           Turn on verbose messages for debugging

CDescription: This script will configure grub for the target distro
'
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
	+ set -x
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ plan=c2.medium.x86
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ target=/mnt/target
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ cprout=/statedir/cpr.json
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
!+ default_path=/tmp/grub.default
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
#+ template_path=/tmp/grub.template
+ getopts p:t:C:D:T:hv OPTION
�+ assert_all_args_consumed 12 -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
+ local index=12
+ shift
+ (( index != 11 + 1 ))
$+ grep -qs /mnt/target /proc/mounts
$+ echo 'Target is mounted... good.'
Target is mounted... good.
+ rm -rf /mnt/target/boot/grub
"+ [[ -d /mnt/target/boot/grub2 ]]
'+ ln -nsfT grub2 /mnt/target/boot/grub
&++ jq -r .rootuuid /statedir/cpr.json
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
0+ [[ -n ae3f7757-9686-420a-ae18-3b3e4c14ad3c ]]
S+ sed s/PACKET_ROOT_UUID/ae3f7757-9686-420a-ae18-3b3e4c14ad3c/g /tmp/grub.template
F++ sed -nr 's|GRUB_CMDLINE_LINUX='\''(.*)'\''|\1|p' /tmp/grub.default
L+ cmdline='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
s+ echo -e '\033[0;33;5;7mDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1\033[0m'
aDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1
*+ sed -i 's|^|export |' /tmp/grub.default
+ source /tmp/grub.default
_++ export 'GRUB_CMDLINE_LINUX=console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
X++ GRUB_CMDLINE_LINUX='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
]++ export 'GRUB_SERIAL_COMMAND=serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
V++ GRUB_SERIAL_COMMAND='serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
++ awk '{print $1}'
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ GRUB_DISTRIBUTOR=Ubuntu

 + envsubst

+ is_uefi
+ [[ -d /sys/firmware/efi ]]

 + uefi=true

 ++ uname -m
+ arch=x86_64
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ os_ver='Ubuntu 18.04'
+ set -- Ubuntu 18.04
+ DOS=Ubuntu
+ DVER=18.04
8+ echo '#### Detected OS on mounted target /mnt/target'
-+ echo 'OS: Ubuntu  ARCH: x86_64 VER: 18.04'
+ chroot_install=false
/#### Detected OS on mounted target /mnt/target
$OS: Ubuntu  ARCH: x86_64 VER: 18.04
?+ [[ Ubuntu == \R\e\d\H\a\t\E\n\t\e\r\p\r\i\s\e\S\e\r\v\e\r ]]
4+ [[ c2.medium.x86 == \c\3\.\m\e\d\i\u\m\.\x\8\6 ]]
*++ jq -r '.bootdevs[]' /statedir/cpr.json
+ bootdevs=/dev/sdd
+ [[ -n /dev/sdd ]]
+ for disk in '$bootdevs'
+ false
+ install_grub_osie
*+ echo 'Running grub-install on /dev/sdd'
+ true
+ [[ x86_64 == aarch64 ]]
!Running grub-install on /dev/sdd
p+ grub-install --recheck --bootloader-id=GRUB --root-directory=/mnt/target --efi-directory=/mnt/target/boot/efi
$Installing for x86_64-efi platform.
>grub-install: error: failed to get canonical path of `tmpfs'.
:+ mv initrd /mnt/target/boot/initrd.img-4.15.0-50-generic
?+ ln -nsf initrd.img-4.15.0-50-generic /mnt/target/boot/initrd
M+ tar --warning=no-timestamp -zxf /tmp/assets/modules.tar.gz -C /mnt/target/
A+ cp /mnt/target/boot/vmlinuz-4.15.0-50-generic /statedir/kernel
D+ cp /mnt/target/boot/initrd.img-4.15.0-50-generic /statedir/initrd
3+ echo -e '\033[0;32m#### Installing GRUB2\033[0m'
p+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template -O /tmp/grub.template
!#### Installing GRUB2
l--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
/Length: 2202 (2.2K) [application/octet-stream]
 Saving to: '/tmp/grub.template'

L     0K ..                                                    100%  499M=0s

H2020-02-11 04:54:02 (499 MB/s) - '/tmp/grub.template' saved [2202/2202]

w+ wget http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default -O /tmp/grub.default
t--2020-02-11 04:54:02--  http://192.168.1.2/misc/osie/current/grub/ubuntu_18_04/c2.medium.x86/grub.template.default
+Connecting to 192.168.1.2:80... connected.
/HTTP request sent, awaiting response... 200 OK
'Length: 168 [application/octet-stream]
Saving to: '/tmp/grub.default'

L     0K                                                       100% 39.4M=0s

F2020-02-11 04:54:02 (39.4 MB/s) - '/tmp/grub.default' saved [168/168]

7+ mount -t efivarfs efivarfs /sys/firmware/efi/efivars
+ mount
�overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ZF6ITVZ6A4LKBQRGDJZCUF7FV3:/var/lib/docker/overlay2/l/BA74WCZKD73W7ONK2VG7BA6FAB:/var/lib/docker/overlay2/l/M7WK5JON5UOCJUTADKR3JTIDEE:/var/lib/docker/overlay2/l/KM6CJNP3CIQABTBGTU4HJQK3UP:/var/lib/docker/overlay2/l/G66TFE6T5HJPATMEDI45XMM3GA:/var/lib/docker/overlay2/l/BBYKXHCY7TD4XDNTRZJPTBT6TK:/var/lib/docker/overlay2/l/2ARNEQ7QLNPA25EGOZH7O5H7BO:/var/lib/docker/overlay2/l/WZDUGLWPKO47DQUCXVZZFRVSEW:/var/lib/docker/overlay2/l/LVEBUE66F3BCHY7WWH7VJUQ6YH:/var/lib/docker/overlay2/l/6VYQU42IYZPDBEN7IQURX4WYDI:/var/lib/docker/overlay2/l/6UYOO2UW47DURTYFZ7KXYKEQQX:/var/lib/docker/overlay2/l/LROHBLGGR636TSAPN5GQMNFIKE:/var/lib/docker/overlay2/l/3JUDEU5QN6S4SPI2LPANNTUC5L:/var/lib/docker/overlay2/l/U2PMHQGRASO7BNMGTJLHACHWM4,upperdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/diff,workdir=/var/lib/docker/overlay2/739f66e155f8cf8e995afb40a74ae85d9c32a47c59d566940d7127f6e1f1e162/work)
:proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
;sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
Ntmpfs on /sys/fs/cgroup type tmpfs (rw,nosuid,nodev,noexec,relatime,mode=755)
�openrc on /sys/fs/cgroup/openrc type cgroup (rw,nosuid,nodev,noexec,relatime,release_agent=/lib/rc/sh/cgroup-release-agent.sh,name=openrc)
Ucpuset on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
Lcpu on /sys/fs/cgroup/cpu type cgroup (rw,nosuid,nodev,noexec,relatime,cpu)
Xcpuacct on /sys/fs/cgroup/cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct)
Rblkio on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
Umemory on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
Xdevices on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
Xfreezer on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
Xnet_cls on /sys/fs/cgroup/net_cls type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls)
[net_prio on /sys/fs/cgroup/net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio)
Opids on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
5tmpfs on /workflow type tmpfs (rw,relatime,mode=755)
0tmpfs on /mnt type tmpfs (rw,relatime,mode=755)
5tmpfs on /statedir type tmpfs (rw,relatime,mode=755)
3tmpfs on /worker type tmpfs (rw,relatime,mode=755)
[devtmpfs on /dev type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
Wdevpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
=shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime)
Dmqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)
A/lib/modloop-x86_64 on /lib/firmware type squashfs (ro,relatime)
cdevtmpfs on /dev/console type devtmpfs (rw,nosuid,relatime,size=10240k,nr_inodes=8194836,mode=755)
7tmpfs on /mnt/target type tmpfs (rw,relatime,mode=755)
7tmpfs on /tmp/assets type tmpfs (rw,relatime,mode=755)
<tmpfs on /etc/resolv.conf type tmpfs (rw,relatime,mode=755)
9tmpfs on /etc/hostname type tmpfs (rw,relatime,mode=755)
6tmpfs on /etc/hosts type tmpfs (rw,relatime,mode=755)
Ishm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)
Befivarfs on /sys/firmware/efi/efivars type efivarfs (rw,relatime)
z+ ./grub-installer.sh -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
K+ USAGE='Usage: ./grub-installer.sh -t /mnt/target -C /path/to/cprout.json
Required Arguments:
-	-p plan      Server plan (ex: t1.small.x86)
5	-t target    Target mount point to write configs to
9	-C path      Path to file containing cpr.sh output json
,	-D path      Path to grub.default template
(	-T path      Path to grub.cfg template

	Options:
 	-h           This help message
5	-v           Turn on verbose messages for debugging

CDescription: This script will configure grub for the target distro
'
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
	+ set -x
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ plan=c2.medium.x86
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ target=/mnt/target
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
+ cprout=/statedir/cpr.json
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
!+ default_path=/tmp/grub.default
+ getopts p:t:C:D:T:hv OPTION
+ case $OPTION in
#+ template_path=/tmp/grub.template
+ getopts p:t:C:D:T:hv OPTION
�+ assert_all_args_consumed 12 -v -p c2.medium.x86 -t /mnt/target -C /statedir/cpr.json -D /tmp/grub.default -T /tmp/grub.template
+ local index=12
+ shift
+ (( index != 11 + 1 ))
$+ grep -qs /mnt/target /proc/mounts
$+ echo 'Target is mounted... good.'
Target is mounted... good.
+ rm -rf /mnt/target/boot/grub
"+ [[ -d /mnt/target/boot/grub2 ]]
'+ ln -nsfT grub2 /mnt/target/boot/grub
&++ jq -r .rootuuid /statedir/cpr.json
0+ rootuuid=ae3f7757-9686-420a-ae18-3b3e4c14ad3c
0+ [[ -n ae3f7757-9686-420a-ae18-3b3e4c14ad3c ]]
S+ sed s/PACKET_ROOT_UUID/ae3f7757-9686-420a-ae18-3b3e4c14ad3c/g /tmp/grub.template
F++ sed -nr 's|GRUB_CMDLINE_LINUX='\''(.*)'\''|\1|p' /tmp/grub.default
L+ cmdline='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
s+ echo -e '\033[0;33;5;7mDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1\033[0m'
aDetected cmdline: console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1
*+ sed -i 's|^|export |' /tmp/grub.default
+ source /tmp/grub.default
_++ export 'GRUB_CMDLINE_LINUX=console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
X++ GRUB_CMDLINE_LINUX='console=tty0 console=ttyS1,115200n8 biosdevname=0 net.ifnames=1'
]++ export 'GRUB_SERIAL_COMMAND=serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
V++ GRUB_SERIAL_COMMAND='serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1'
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
++ awk '{print $1}'
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ GRUB_DISTRIBUTOR=Ubuntu

 + envsubst

+ is_uefi
+ [[ -d /sys/firmware/efi ]]

 + uefi=true

 ++ uname -m
+ arch=x86_64
++ detect_os /mnt/target
++ local rootdir os version
++ rootdir=/mnt/target
'+++ chroot /mnt/target lsb_release -si
+++ sed 's/ //g'
++ os=Ubuntu
'+++ chroot /mnt/target lsb_release -sr
++ version=18.04
++ [[ -n Ubuntu ]]
++ [[ -n 18.04 ]]
++ echo 'Ubuntu 18.04'

++ return
+ os_ver='Ubuntu 18.04'
+ set -- Ubuntu 18.04
+ DOS=Ubuntu
+ DVER=18.04
8+ echo '#### Detected OS on mounted target /mnt/target'
-+ echo 'OS: Ubuntu  ARCH: x86_64 VER: 18.04'
+ chroot_install=false
/#### Detected OS on mounted target /mnt/target
$OS: Ubuntu  ARCH: x86_64 VER: 18.04
?+ [[ Ubuntu == \R\e\d\H\a\t\E\n\t\e\r\p\r\i\s\e\S\e\r\v\e\r ]]
4+ [[ c2.medium.x86 == \c\3\.\m\e\d\i\u\m\.\x\8\6 ]]
*++ jq -r '.bootdevs[]' /statedir/cpr.json
+ bootdevs=/dev/sdd
+ [[ -n /dev/sdd ]]
+ for disk in '$bootdevs'
+ false
+ install_grub_osie
*+ echo 'Running grub-install on /dev/sdd'
+ true
+ [[ x86_64 == aarch64 ]]
!Running grub-install on /dev/sdd
p+ grub-install --recheck --bootloader-id=GRUB --root-directory=/mnt/target --efi-directory=/mnt/target/boot/efi
$Installing for x86_64-efi platform.
>grub-install: error: failed to get canonical path of `tmpfs'.
{"level":"info","msg":"Container removed with Status  ACTION_FAILED","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Wait finished for failed or timeout container","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"error","msg":"Failed to remove container as  Error: No such container: 490a27d09622abecd25f0362472bb5a5de751ccdad833477dadd3a994089ee99","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"level":"info","msg":"Action container exits with status code  ACTION_FAILED","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
{"Task":"os-installation","action":"install-grub","level":"error","msg":"Action Failed","time":"2020-02-11T04:54:03Z","worker_id":"fde7c87c-d154-447e-9fce-7eb7bdec90c0","workflow_id":"cdc7d140-6f3e-4285-8303-668f670ce145"}
